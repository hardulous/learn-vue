####### VUE JS #######

Vue.js is a javascript framework for building user interfaces or single page application. The core vue library is focused on doing one thing which is building user interfaces. 

Vue alone does not focus on the other aspects of application like routing or HTTP requests, But Vue has a rich eco system of other powerful libraries that we can integrate with Vue such as " Vuex for complex state management ", " Vue router for routing ", " Vuetify for UI elements " etc.

Vue is still called a framework even though you install routing/state tools separately becase ::

1. Framework ≠ Monolithic

A framework provides structure, conventions, and a standard way to build apps. It doesn’t have to include everything by default. Vue gives you a "complete solution" through official packages (like Vue Router & Pinia), which are:

Maintained by the Vue core team
Designed to fit together seamlessly
Follow the same philosophy and patterns

2. Opinionated architecture

Vue guides how you structure components, handle reactivity, organize your app, etc. This guidance and integration across tools is what makes it a framework.

3. Modular by design = Progressive Framework

Vue is called a progressive framework because:

You can start small (just the core Vue).
Then progressively add features (router, state, etc.) without rewriting your code.
This makes Vue flexible for both small widgets and large SPAs.


##### WHY LEARN VUE JS #####

Vue.js has 3rd most starred github repo in the world, Means thousands of developers around the world enjoy working with vue, As a result we are going to find solutions to most of the problems that we face easily because of huge community of vue.js.

1. Vue is approachable

Prequist for vue.js are only html, css and js. It provides vue devtools which gives insight into our apps, Vue cli with which we can quickly scaffold and manage projects. Vue has a component based architecture just like react for code reusability.

2. Vue is versatile

Can work as both library ( Allows to download other js packages on it ) or framework ( Use built-in or vue own ecosystem packages )

3. Vue is performant

Vue measures just 33kb minified and gzipped at runtime, Also because of virtual DOM only necessary pieces in the DOM are updated which results in better performance. 

Vue is a framework built by taking the good parts from a lot of other libraries and frameworks and then improving where necessary. 


###### VUE.JS EXTENSION #######

"Vetur" ( It provides syntax highlighting, code snippets, linting and formatting support etc. ) and nowadays new extension called "Vue" is getting used, Vue VSCode Snippets. 


####### 1st VUE PROJECT #######

There are 4 different ways to add vue to the project ::

1. Include vue as a CDN package using js " <script src> " tag. 

Good when we want to incorporate vue into a really old legacy code base where some parts of the ui will be enhanced by vue or when we want to quickly prototype something for learning purpose 

2. Using npm package manager by command " npm install vue " ( PREFERED APROACH )

Recommended approach for building large scale vue.js application but then we have to manually do a lot of config work like setting up linters, formaters, hot reloading, webpack, build scripts etc. 

3. Using vue cli for creating spa vue js application, " npm install -g @vue/cli " and " vue create <project-name> " by running these 2 commands we have vue js project up and running. Vue cli uses webpack under the hood

Takes only a few minutes to get up and running with hot-reload, lint-on-save, and production ready builds. 

4. Using vite which is a web dev build tool that serves our code via native ES module imports that is esBuild bundler during dev and bundles it with rollup bundler for production. Because of ES module aproach our code is served at lightining fast speed and get instant hot module replacement. 

" npm create vite@latest <project-name> " which will then promt to choose framework which is vue.js in our case

Here we will use 3rd aproach which is " VUE CLI ", by command "npm install -g @vue/cli" and "vue create hello" to create "hello" vue project. To know vue cli version command "vue --version".

To run our project command " npm run serve " from package.json and it uses " webpack-dev-server (dev) " and " webpack (prod) " behind the scene


###### FOLDER STRUCTURE #######

1. Package.json => It contains 3 default command under scripts section "serve" (To run application in dev mode), "build" (To create production ready build of the application) and "lint" (To fix any linting error in the app)

The configuration of esLint is also present in same package.json file under "eslintConfig" section

2. Public Folder => It contains static assets that we want to get published and available to end user when going live / hosted. Contains atleast a "index.html" file 

3. Src Folder => It is the folder we will be working with most during the development. 

 (a). The starting / entry point of vue.js app is "main.js" file 

 (b). components folder => It contains reusable UI elements or components. 

 (c). assets folder => It contains static files like images, fonts, icons etc. Webpack/Vite will handle importing them (e.g., @/assets/logo.png).

When we run command "npm run serve" the "index.html" file will be served in the browser which contains a root dom node with id="app". In main.js file the "createApp()" function will mount the root "App" component into that dom with id="app". 

The "App" components contains its own html, css and js which corresponds to particular view / portion of the whole app

4. SINGLE FILE COMPONENT (SFC) .vue => It’s a special file format that lets you define the template (HTML), script (JavaScript/TypeScript), and style (CSS) of a portion of ui in a single file. 

A .vue file contains everything a component or portion of ui needs ::

 (a). HTML structure (template) 
 (b). Behaviour, logic and functionality (script) 
 (c). Style related to html under the template (style) 

So unlike in react dividing the portion of ui into layers like jsx (html + js) and css (style) and then import or join them together to form a ui, In vue a single .vue file will describe the whole html, css and js of portion of ui.

But browser does not understand a .vue file similar to way .jsx file for this webpack with vue-loader is used to convert .vue files into plain js files that it can understand, Similar to way babel-loader is used to convert jsx into js for react.

5. A major portion of working with .vue file is wiring up data and the logic present in script block to the html present in template block. For data binding we use " vue component defination using ptions api "

6. When building web app we often needs to show or hide some ui elements based on certain conditions, For this vue js provide us 4 directives name, "v-if", "v-else", "v-else-if" and "v-show".

7. When building web app we often needs to show list of items like list of names, products, courses etc. It means repeating a html element or set of html elements in the DOM. For this vue js provide us with v-for directive.

8. Most of the time in web app we execute some functions when something happen ex, user event, interaction with wep app, after some operation is done etc. For these we define those function inside "methods" object property of same export default component options object in <script> tag

9. In web app most of the time we handle form or user inputs like, Capturing user inputs, Textareas, single or multi-select control, Checkbox, Checkbox group, Radio and once capture the user inputs have to handle form submit.

Long short story in vue js we can create CONTROLLED COMPONENT as well just like in react but way is different ::

In vue each portion of ui is represented by a .vue file which consist of mainly <template> and <script> block, When we create a controlled component it means capturing data from user to process later on. In vue file form controls are present in <template> block and corresponding data in <script> block. When user fill the data in form <template> we need a way to propagate that data into to <script> block, And if there is already exist data in <script> block propagate it to <template> block. 

So we need our <template> and <script> to be in sync with each other. 

10.  Vue js provide us with modifiers to directives (like @click, v-model, v-on, etc.) to extend or tweak their behavior — without writing extra code

11. So far in order to display data in ui we have STATIC HTML, BINDING DATA USING TEXT INTERPOLATION, JS EXPRESSION INSIDE MUSTACHE SYNTAX, NETHODS THAT RETURN VALUE TO BE RENDERED IN THE UI. Now another way to display data in ui is COMPUTED PROPERTIES. 

12. Just like in react we have useEffect() hook to execute some code/side effects after initial render or when any value in dependency array changes, Similarly in vue we have WATCHER. 

Just like useEffect() hook can work as 'componentDidMount' and behave differently for reference type state, The watcher can also replicate same behaviour using 'immediate' and 'deep' watcher features.

13. Similar to react vue follows component architecture that lets you break your application into reusable, isolated pieces with their own logic and templates.

In vue js component code is present in .vue file and can contain <template>, <script> and <style> block which describes a portion of ui.

Just like in react in order to make component resuable we make it dynamic using props and using props a same component can show different ui, Same props can be used in vue js as well using options API. 

14. Just like in react we have Context Api to avoid prop drilling for deeply nested components and directly pass data to them in vue we have Provide and Inject for the same. 

15. So far using props we can pass data from parent to child component but sometime we want to pass data from child to parent component as well for this we use custom events in vue.

16. Just like we can pass HTML, text or components as a prop from parent to child in react using .children in vue to acheive same we use SLOTS.

17. Just like in react we have 2 types of styling global (which is available to whole application) and local scopped (which is available to that component only). Same concept is available in vue js as well.

18. Sometime we need to dynamically mount and unmount component from ui ex tab ui element where based on tab click we show different ui. In vue we accomplish this using DYNAMIC COMPONENT. 

19. Just like in react to render a component outside its DOM hierarchy we have PORTAL in vue we have TELEPORT.

20. In a web application we always need to make request to the server to get some data based on user interaction, But we know vue is a framework to build user interface it is not concerned with making http request so for this we have to rely on HTTP LIBRARY like axios. 